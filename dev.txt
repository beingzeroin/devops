DEV info

---

TODO
* >>> add spreadsheets notes: java, scala, data structures, algorithms, design patterns?
* review https://conorfennell.github.io/scala-zen
* sla, percentile, jmx, mbeans, jconsole, jolokia, jstat, javap
* add notes from JVM memory course, jps
java -XX:+PrintFlagsFinal -version

* review kubernetes + minikube

* aws: emr + s3
* EMR docs, boto3

# emr info on master node
cat /mnt/var/lib/info/job-flow.json | jq

* add in linux: monit, nohup, screen, mc

* awesome links, best practices, bash/vim keyboard shortcuts

---

* Avro **Avro** is a data serialization system
* Parquet **Parquet** is a columnar storage format that can efficiently store nested data
* Flume
* Sqoop
* Pig
* Hive
* Presto
* Crunch
* HBase
* Flink
* Ganglia **Ganglia** is a monitoring system for Hadoop
* Zeppelin
* Knox

* elastic-search
* kong
* etcd
* linux containers LXD

---

# kafka
https://hevodata.com/blog/how-to-set-up-kafka-on-ubuntu-16-04/

# keytool
https://www.digitalocean.com/community/tutorials/java-keytool-essentials-working-with-java-keystores#viewing-keystore-entries
https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs

# avro
https://avro.apache.org/docs/current/gettingstartedjava.html
https://aseigneurin.github.io/2016/03/02/kafka-spark-avro-kafka-101.html
# avro + schema registry
https://www.sderosiaux.com/2017/03/02/serializing-data-efficiently-with-apache-avro-and-dealing-with-a-schema-registry/
https://github.com/lagom/lagom/issues/668
https://docs.confluent.io/current/schema-registry/docs/serializer-formatter.html
http://cloudurable.com/blog/kafka-avro-schema-registry/index.html
https://gist.github.com/avpatel257/0a88d20200661b31ab5f5df7adc42e6f

# api
https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9
https://github.com/WhiteHouse/api-standards
https://geemus.gitbooks.io/http-api-design/content/en/

# supervisor
https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps

# spark-in-action
curl -O https://raw.githubusercontent.com/spark-in-action/first-edition/master/spark-in-action-box.json
vagrant box add spark-in-action-box.json
vagrant init manning/spark-in-action
vagrant up
vagrant halt
vagrant destroy
vagrant box remove manning/spark-in-action

# hadoop
https://dwbi.org/etl/bigdata/183-setup-hadoop-cluster
https://www.linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster/
https://www.linode.com/docs/databases/hadoop/install-configure-run-spark-on-top-of-hadoop-yarn-cluster/

# vagrant images
https://github.com/martinprobson/vagrant-hadoop-hive-spark

# course

https://developers.google.com/machine-learning/crash-course

# TODO
https://docs.scala-lang.org/overviews/collections/performance-characteristics.html
https://docs.scala-lang.org/overviews/collections/introduction.html

# typeclass
http://tpolecat.github.io/2015/04/29/f-bounds.html
https://julien-truffaut.github.io/Typeclass
# type projector
https://typelevel.org/blog/2015/07/13/type-members-parameters.html
# best practices
https://stackoverflow.com/questions/5827510/how-to-override-apply-in-a-case-class-companion

# blogs
http://www.marcoyuen.com/articles/2016/09/08/stackless-scala-1-the-problem.html
https://medium.com/@sinisalouc/demystifying-the-monad-in-scala-cc716bb6f534
https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/
http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html
http://learnyouahaskell.com/types-and-typeclasses#typeclasses-101
http://learnyouahaskell.com/
http://www.casualmiracles.com/2012/05/03/a-small-example-of-the-typeclass-pattern-in-scala/
https://markhneedham.com/blog/2012/05/22/scalahaskell-a-simple-example-of-type-classes/

# paper
http://blog.higher-order.com/assets/trampolines.pdf
http://ropas.snu.ac.kr/~bruno/papers/TypeClasses.pdf

https://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf
http://www.staff.city.ac.uk/~ross/papers/Applicative.pdf
http://functorial.com/stack-safety-for-free/index.pdf

# jvm stack
https://www.artima.com/insidejvm/ed2/jvm8.html
https://alvinalexander.com/scala/fp-book/recursion-jvm-stacks-stack-frames

a monad is a typeclass with a unit and flatMap method
Scala enables the typeclass pattern using traits and implicits - ad-hoc (by function) polymorphism ? alternative to inheritance ?

Type classes are a powerful tool used in functional programming to enable ad-hoc polymorphism, more commonly known as overloading. Where many object-oriented languages leverage subtyping for polymorphic code, functional programming tends towards a combination of parametric polymorphism (think type parameters, like Java generics) and ad-hoc polymorphism.
